// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite
// plugin that tells the Electron app where to look for the Vite-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;
declare const MAIN_WINDOW_VITE_NAME: string;

// Transaction and Category types
interface Transaction {
  id: string;
  user: string;
  source: string;
  date: Date;
  amount: number;
  currency: string;
  iban?: string;
  other_party_iban?: string;
  other_party?: string;
  usage: string;
  category?: Category;
}

interface Category {
  name: string;
  subcategory?: string;
}

// Preload types
interface ThemeModeContext {
  toggle: () => Promise<boolean>;
  dark: () => Promise<void>;
  light: () => Promise<void>;
  system: () => Promise<boolean>;
  current: () => Promise<"dark" | "light" | "system">;
}
interface ElectronWindow {
  minimize: () => Promise<void>;
  maximize: () => Promise<void>;
  close: () => Promise<void>;
}

interface TransactionDBContext {
  // Basic CRUD operations
  addTransaction: (transaction: Transaction) => Promise<boolean>;
  addTransactions: (transactions: Transaction[]) => Promise<boolean>;
  updateTransaction: (transaction: Transaction) => Promise<boolean>;
  removeTransaction: (id: string) => Promise<boolean>;
  getTransactionById: (id: string) => Promise<Transaction | null>;
  getAllTransactions: () => Promise<Transaction[]>;

  // Search operations
  getTransactionsByDateRange: (startDate: Date, endDate: Date) => Promise<Transaction[]>;
  getTransactionsByUser: (user: string) => Promise<Transaction[]>;
  getTransactionsByCategory: (name: string, subcategory?: string) => Promise<Transaction[]>;
  searchTransactions: (filters: any) => Promise<Transaction[]>;

  // Utility operations
  getTransactionCount: () => Promise<number>;
  getTransactionsPaginated: (page: number, limit: number) => Promise<{
    transactions: Transaction[];
    total: number;
    page: number;
    totalPages: number;
  }>;

  // Database operations
  backupDatabase: (backupPath: string) => Promise<boolean>;

  // Database file operations
  loadDatabase: (filePath: string) => Promise<boolean>;
  createDatabase: (filePath: string) => Promise<boolean>;
  closeDatabase: () => Promise<boolean>;
  isDatabaseLoaded: () => Promise<boolean>;
  getDatabasePath: () => Promise<string | null>;
  selectDatabaseFile: () => Promise<string | null>;
  saveDatabaseFile: () => Promise<string | null>;
}

declare interface Window {
  themeMode: ThemeModeContext;
  electronWindow: ElectronWindow;
  transactionDB: TransactionDBContext;
}
